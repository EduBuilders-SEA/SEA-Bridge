Metadata-Version: 2.4
Name: sea-bridge
Version: 0.1.0
Summary: SEA Bridge - Document Translation Service
Author-email: SEA Bridge Team <contact@example.com>
License: MIT
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastapi<1.0.0,>=0.109.2
Requires-Dist: uvicorn[standard]<0.28.0,>=0.27.1
Requires-Dist: python-multipart<0.1.0,>=0.0.9
Requires-Dist: python-dotenv<2.0.0,>=1.0.1
Requires-Dist: pydantic-settings<3.0.0,>=2.2.1
Requires-Dist: pydantic<3.0.0,>=2.6.4
Requires-Dist: python-jose[cryptography]<4.0.0,>=3.3.0
Requires-Dist: passlib[bcrypt]<2.0.0,>=1.7.4
Requires-Dist: boto3<2.0.0,>=1.34.19
Requires-Dist: aioboto3
Requires-Dist: botocore<2.0.0,>=1.34.19
Requires-Dist: PyMuPDF<2.0.0,>=1.23.21
Requires-Dist: python-docx<2.0.0,>=1.1.0
Requires-Dist: Pillow<11.0.0,>=10.2.0
Requires-Dist: python-magic<0.5.0,>=0.4.27
Requires-Dist: redis<6.0.0,>=5.0.1
Requires-Dist: hiredis<3.0.0,>=2.3.1
Requires-Dist: python-slugify<9.0.0,>=8.0.1
Requires-Dist: python-magic-bin<0.5.0,>=0.4.14; sys_platform == "win32"
Requires-Dist: python-magic<0.5.0,>=0.4.27; sys_platform != "win32"
Requires-Dist: anyio<5.0.0,>=4.3.0
Requires-Dist: httpx<1.0.0,>=0.27.0
Provides-Extra: dev
Requires-Dist: pytest<9.0.0,>=8.0.2; extra == "dev"
Requires-Dist: pytest-asyncio<0.24.0,>=0.23.5; extra == "dev"
Requires-Dist: pytest-cov<5.0.0,>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock<4.0.0,>=3.12.0; extra == "dev"
Requires-Dist: black<25.0.0,>=24.1.1; extra == "dev"
Requires-Dist: isort<6.0.0,>=5.13.2; extra == "dev"
Requires-Dist: mypy<2.0.0,>=1.8.0; extra == "dev"
Requires-Dist: pylint<4.0.0,>=3.0.3; extra == "dev"
Requires-Dist: docstring-to-markdown<0.13,>=0.12; extra == "dev"
Requires-Dist: sphinx<8.0.0,>=7.2.6; extra == "dev"
Requires-Dist: sphinx-rtd-theme<3.0.0,>=2.0.0; extra == "dev"

# SEA Bridge - Document Translation Service

A high-performance, scalable document translation service built with FastAPI, AWS, and modern Python.

## Features

- **Document Upload & Processing**: Upload documents in various formats (PDF, DOCX, TXT, images)
- **Language Translation**: Translate documents between multiple languages using AWS Translate
- **Asynchronous Processing**: Background job processing with AWS SQS
- **Secure File Storage**: Store files securely in AWS S3 with fine-grained access control
- **RESTful API**: Clean, well-documented API with OpenAPI (Swagger) documentation
- **Authentication & Authorization**: JWT-based authentication with role-based access control
- **Caching**: Redis caching for improved performance
- **Monitoring & Logging**: Comprehensive logging and monitoring support

## Tech Stack

- **Framework**: FastAPI
- **Database**: PostgreSQL with SQLAlchemy ORM
- **Storage**: AWS S3
- **Message Queue**: AWS SQS
- **Caching**: Redis
- **Document Processing**: PyMuPDF, python-docx, AWS Textract
- **Translation**: AWS Translate
- **Authentication**: JWT
- **Deployment**: Docker, AWS ECS/EKS

## Prerequisites

- Python 3.9+
- PostgreSQL 13+
- Redis 6+
- AWS Account with appropriate permissions
- Docker (for containerized deployment)

## Installation

1. **Clone the repository**
   ```bash
   git clone https://github.com/your-org/sea-bridge.git
   cd sea-bridge/python-service
   ```

2. **Create a virtual environment**
   ```bash
   python -m venv venv
   source venv/bin/activate  # On Windows: venv\Scripts\activate
   ```

3. **Install dependencies**
   ```bash
   pip install -r requirements.txt
   ```

4. **Set up environment variables**
   Copy `.env.template` to `.env` and update the values:
   ```bash
   cp .env.template .env
   ```

5. **Run database migrations**
   ```bash
   alembic upgrade head
   ```

## Configuration

Create a `.env` file in the project root with the following variables:

```env
# App
APP_NAME="SEA Bridge"
APP_ENV=development
DEBUG=True
SECRET_KEY=your-secret-key-here
API_V1_STR=/api/v1

# CORS
BACKEND_CORS_ORIGINS=["http://localhost:3000", "http://localhost:8000"]

# Database
DATABASE_URL=postgresql://user:password@localhost:5432/sea_bridge
DATABASE_POOL_SIZE=5
DATABASE_MAX_OVERFLOW=10

# AWS
AWS_ACCESS_KEY_ID=your-access-key
AWS_SECRET_ACCESS_KEY=your-secret-key
AWS_REGION=us-east-1
AWS_ACCOUNT_ID=your-account-id

# S3
S3_BUCKET_NAME=sea-bridge-documents
S3_ENDPOINT_URL=None  # Only for local development with LocalStack

# SQS
SQS_QUEUE_NAME=document-processing-queue
SQS_ENDPOINT_URL=None  # Only for local development with LocalStack

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_DB=0
REDIS_TTL=86400  # 24 hours

# JWT
JWT_SECRET_KEY=your-jwt-secret
JWT_ALGORITHM=HS256
JWT_ACCESS_TOKEN_EXPIRE_MINUTES=30
JWT_REFRESH_TOKEN_EXPIRE_DAYS=7

# Email (for password reset, etc.)
SMTP_SERVER=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASSWORD=your-email-password
EMAILS_FROM=your-email@gmail.com
EMAIL_RESET_TOKEN_EXPIRE_HOURS=24
```

## Running the Application

### Development

```bash
uvicorn src.main:app --reload --host 0.0.0.0 --port 8000
```

The API will be available at `http://localhost:8000`

### Production

For production, it's recommended to use a production-ready ASGI server like Uvicorn with Gunicorn:

```bash
gunicorn src.main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
```

Or using Docker:

```bash
docker build -t sea-bridge .
docker run -d --name sea-bridge -p 8000:8000 --env-file .env sea-bridge
```

## API Documentation

- **Swagger UI**: `http://localhost:8000/docs`
- **ReDoc**: `http://localhost:8000/redoc`

## Project Structure

```
src/
├── api/                    # API routes
│   ├── deps/              # Dependencies
│   ├── routes/            # API route modules
│   └── __init__.py        # API router
├── core/                  # Core functionality
│   ├── config.py          # Application configuration
│   ├── exceptions.py      # Custom exceptions
│   ├── logging.py         # Logging configuration
│   ├── middleware.py      # Custom middleware
│   └── security.py        # Security utilities
├── db/                    # Database configuration
│   ├── base.py            # Base database model
│   ├── session.py         # Database session management
│   └── migrations/        # Database migrations (Alembic)
├── models/                # SQLAlchemy models
│   ├── user.py            # User model
│   └── document.py        # Document model
├── schemas/               # Pydantic schemas
│   ├── base.py            # Base schemas
│   ├── user.py            # User schemas
│   ├── document.py        # Document schemas
│   └── token.py           # Authentication schemas
├── services/              # Business logic
│   ├── user.py           # User service
│   ├── document.py       # Document service
│   └── storage.py        # File storage service
├── utils/                # Utility functions
├── main.py               # FastAPI application
└── requirements.txt      # Project dependencies
```

## Testing

Run the test suite:

```bash
pytest
```

## Deployment

### Docker

Build the Docker image:

```bash
docker build -t sea-bridge .
```

Run the container:

```bash
docker run -d --name sea-bridge -p 8000:8000 --env-file .env sea-bridge
```

### AWS ECS

1. Push the Docker image to ECR:
   ```bash
   aws ecr create-repository --repository-name sea-bridge
   $(aws ecr get-login --no-include-email)
   docker tag sea-bridge:latest your-account-id.dkr.ecr.region.amazonaws.com/sea-bridge:latest
   docker push your-account-id.dkr.ecr.region.amazonaws.com/sea-bridge:latest
   ```

2. Create an ECS task definition and service
3. Set up an Application Load Balancer
4. Configure auto-scaling policies

## Environment Variables

See `.env.template` for a complete list of environment variables.

## Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.
